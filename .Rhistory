blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::preview_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
knitr::opts_chunk$set(collapse = TRUE)
blogdown:::update_meta_addin()
blogdown:::serve_site()
#  bibliotecas
library(tidyverse)
library(rsample)
library(gtsummary)
library(dlookr)
library(flextable)
library(caret)
library(missRanger)
library(rms)
library(mlbench)
library(CalibrationCurves)
data(PimaIndiansDiabetes2)
# lectura y transformación de datos
datos <-
PimaIndiansDiabetes2  %>%
missRanger(num.trees = 100,verbose = 0) %>% # imputación múltiple
mutate(diabetes=if_else(diabetes=="pos",1,0)) %>% # transformación del resultado
select(diabetes,age,pedigree,pregnant,mass,glucose,pressure) # elección de predictores
#configuración
d <- datadist(datos)
options(datadist='d')
# Ajuste de un modelo de regresión logística
datos %>%
glm(diabetes ~ ., family = "binomial",data = .) %>%
gtsummary::tbl_regression(exponentiate = T,
tidy_fun = broom.helpers::tidy_parameters)
# Partición de datos
split <- initial_split(datos,strata="diabetes")
entrenamiento <- training(split)
prueba <- training(split)
# CONFIGURACIÓN RMS OBLIGATORIA -------------------------------------------
ddist <- datadist(entrenamiento)
options(datadist = "ddist")  # ¡CRÍTICO! Sin esto, las funciones rms fallarán
# Paso 1: Ajustar el modelo y validar
modelo <-
lrm(diabetes ~ . ,data = entrenamiento,x = T,y = T)
# PREDICCIÓN RECALIBRADA EN PRUEBA ----------------------------------------
# Predictor lineal en prueba
prediciones <- predict(modelo, newdata = prueba, type = "lp")
val.prob.ci.2(p = prediciones,y =prueba$diabetes )
# CONFIGURACIÓN RMS OBLIGATORIA -------------------------------------------
ddist <- datadist(datos)
options(datadist = "ddist")  # ¡CRÍTICO! Sin esto, las funciones rms fallarán
# Paso 1: Ajustar el modelo y validar
modelo <-
lrm(diabetes ~ . ,data = entrenamiento,x = T,y = T)
# PREDICCIÓN RECALIBRADA EN PRUEBA ----------------------------------------
# Predictor lineal en prueba
prediciones <- predict(modelo, newdata = prueba, type = "lp")
val.prob.ci.2(p = prediciones,y =prueba$diabetes )
# Partición de datos
split <- initial_split(datos,strata="diabetes")
entrenamiento <- training(split)
prueba <- training(split)
# CONFIGURACIÓN RMS OBLIGATORIA -------------------------------------------
ddist <- datadist(datos)
options(datadist = "ddist")  # ¡CRÍTICO! Sin esto, las funciones rms fallarán
# Paso 1: Ajustar el modelo y validar
modelo <-
lrm(diabetes ~ . ,data = entrenamiento,x = T,y = T)
# PREDICCIÓN RECALIBRADA EN PRUEBA ----------------------------------------
# Predictor lineal en prueba
prediciones <- predict(modelo, newdata = prueba, type = "lp")
# val.prob.ci.2(p = prediciones,y =prueba$diabetes )
prediciones
prueba$diabetes
# PREDICCIÓN RECALIBRADA EN PRUEBA ----------------------------------------
# Predictor lineal en prueba
prediciones <- predict(modelo, newdata = prueba, type = "lp")
val.prob.ci.2(p = prediciones,y =prueba$diabetes )
# Partición de datos
split <- initial_split(datos,strata="diabetes")
entrenamiento <- training(split)
prueba <- testing(split)
# CONFIGURACIÓN RMS OBLIGATORIA -------------------------------------------
ddist <- datadist(datos)
options(datadist = "ddist")  # ¡CRÍTICO! Sin esto, las funciones rms fallarán
# Paso 1: Ajustar el modelo y validar
modelo <-
lrm(diabetes ~ . ,data = entrenamiento,x = T,y = T)
# PREDICCIÓN RECALIBRADA EN PRUEBA ----------------------------------------
# Predictor lineal en prueba
prediciones <- predict(modelo, newdata = prueba, type = "lp")
val.prob.ci.2(p = prediciones,y =prueba$diabetes )
# PREDICCIÓN RECALIBRADA EN PRUEBA ----------------------------------------
# Predictor lineal en prueba
prediciones <- predict(modelo, newdata = prueba, type = "fitted")
val.prob.ci.2(p = prediciones,y =prueba$diabetes )
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::serve_site()
knitr::opts_chunk$set(collapse = TRUE)
#  bibliotecas
library(tidyverse)
library(rsample)
library(gtsummary)
library(dlookr)
library(flextable)
library(caret)
library(missRanger)
library(rms)
library(mlbench)
library(CalibrationCurves)
data(PimaIndiansDiabetes2)
# lectura y transformación de datos
datos <-
PimaIndiansDiabetes2  %>%
missRanger(num.trees = 100,verbose = 0) %>% # imputación múltiple
mutate(diabetes=if_else(diabetes=="pos",1,0)) %>% # transformación del resultado
select(diabetes,age,pedigree,pregnant,mass,glucose,pressure) # elección de predictores
#configuración
d <- datadist(datos)
options(datadist='d')
# Ajuste de un modelo de regresión logística
datos %>%
glm(diabetes ~ ., family = "binomial",data = .) %>%
gtsummary::tbl_regression(exponentiate = T,
tidy_fun = broom.helpers::tidy_parameters)
# Partición de datos
split <- initial_split(datos,strata="diabetes")
entrenamiento <- training(split)
prueba <- testing(split)
# CONFIGURACIÓN RMS OBLIGATORIA -------------------------------------------
ddist <- datadist(datos)
options(datadist = "ddist")  # ¡CRÍTICO! Sin esto, las funciones rms fallarán
# Paso 1: Ajustar el modelo y validar
modelo <-
lrm(diabetes ~ . ,data = entrenamiento,x = T,y = T)
# PREDICCIÓN RECALIBRADA EN PRUEBA ----------------------------------------
# Predictor lineal en prueba
prediciones <- predict(modelo, newdata = prueba, type = "fitted")
val.prob.ci.2(p = prediciones,y =prueba$diabetes )
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
#  bibliotecas
library(tidyverse)
library(rsample)
library(gtsummary)
library(dlookr)
library(flextable)
library(caret)
library(missRanger)
library(rms)
library(mlbench)
library(CalibrationCurves)
data(PimaIndiansDiabetes2)
# lectura y transformación de datos
datos <-
PimaIndiansDiabetes2  %>%
missRanger(num.trees = 100,verbose = 0) %>% # imputación múltiple
mutate(diabetes=if_else(diabetes=="pos",1,0)) %>% # transformación del resultado
select(diabetes,age,pedigree,pregnant,mass,glucose,pressure) # elección de predictores
#configuración
d <- datadist(datos)
options(datadist='d')
# Ajuste de un modelo de regresión logística
datos %>%
glm(diabetes ~ ., family = "binomial",data = .) %>%
gtsummary::tbl_regression(exponentiate = T,
tidy_fun = broom.helpers::tidy_parameters)
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::check_site()
blogdown::check_site()
blogdown::hugo_version()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::serve_site()
blogdown::check_site()
blogdown:::serve_site()
blogdown::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::preview_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
set.seed(123)
library(ggplot2)
effect <- 0.1
sd <- 1
N <- seq(20, 10000, by=50)
p_values <- sapply(N, function(n) {
t.test(rnorm(n, mean=effect, sd=sd), mu=0)$p.value
})
data <- data.frame(N, p_values)
ggplot(data, aes(N, p_values)) +
geom_line() +
geom_hline(yintercept = 0.05, linetype = "dashed", color="red") +
labs(x = "Tamaño muestral (N)", y = "Valor p") +
theme_minimal()
blogdown:::preview_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
install.packages("C:/Users/maicel/Downloads/iterators_1.0.14.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/maicel/Downloads/iterators_1.0.14.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/maicel/Downloads/magrittr_2.0.4.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/maicel/Downloads/stringr_1.5.2.tar.gz", repos = NULL, type = "source")
install.packages("tidyverse")
install.packages(c("blogdown", "quarto", "shiny", "dlookr", "caret", "pwr"))
install.packages("C:/Users/maicel/Downloads/mice_3.18.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/maicel/Downloads/mice_3.18.0.zip", repos = NULL, type = "win.binary")
install.packages("blogdown")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
install.packages("keras")
install.packages("torch")
library(keras)
install.packages("keras3")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown::stop_server()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
wowchemy_version <- function(root = ".") {
mt <- file.path(root, "config/_default/module.toml")
gm <- file.path(root, "go.mod")
if (file.exists(mt)) {
lines <- readLines(mt, warn = FALSE)
v <- grep('wowchemy.*version\\s*=\\s*"', lines, value = TRUE)
if (length(v)) return(v)
out <- tryCatch(blogdown::hugo_cmd("mod", "graph"), error = function(e) NA)
if (!is.na(out)) return(out)
}
if (file.exists(gm)) {
lines <- readLines(gm, warn = FALSE)
v <- grep('wowchemy-hugo-themes/modules/wowchemy.*v[0-9]', lines, value = TRUE)
if (length(v)) return(v)
}
tf <- list.files(file.path(root, "themes"), pattern = "theme\\.toml$", recursive = TRUE, full.names = TRUE)
if (length(tf)) {
ver <- grep('^version\\s*=\\s*"', readLines(tf[1], warn = FALSE), value = TRUE)
if (length(ver)) return(paste(basename(dirname(tf[1])), ver, sep = " — "))
desc <- tryCatch(system2("git", c("-C", dirname(tf[1]), "describe", "--tags", "--always"),
stdout = TRUE), error = function(e) "")
if (length(desc) && nchar(desc[1])) return(paste("Git:", desc[1]))
}
"No pude detectar la versión (¿usas Modules o carpeta themes?)."
}
wowchemy_version()
# Localiza la carpeta del tema
tf <- list.files("themes", pattern = "theme\\.toml$", recursive = TRUE, full.names = TRUE)
td <- dirname(tf[1]); td
# 1) Ver de qué repo viene
system2("git", c("-C", td, "remote", "-v"), stdout = TRUE)
# 2) Ver si hay un tag que corresponda a tu commit
system2("git", c("-C", td, "describe", "--tags", "--always"), stdout = TRUE)
# 3) Ver fecha y mensaje del commit actual
system2("git", c("-C", td, "show", "-s", "--format=%h %ci %d %s", "HEAD"), stdout = TRUE)
# 4) Listar tags del remoto (para cruzar con tu commit si no hay tag local)
system2("git", c("-C", td, "ls-remote", "--tags", "origin"), stdout = TRUE)
library(bookdown)
detach("package:bookdown", unload = TRUE)
library(blogdown)
check_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown:::check_site()
blogdown:::check_site()
blogdown:::check_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::build_site()
blogdown:::check_site()
?blogdown:::check_site()
check_content()
blogdown:::check_content()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::build_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::build_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
