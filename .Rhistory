blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
library(Rcmdr)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()  # Cierra el servidor en ejecución
blogdown::serve_site()  # Inicia el servidor nuevamente
library(ggstatsplot)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
x <- list.files(recursive = T)
x
x %>% writeClipboard()
writeClipboard(x)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::preview_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
knitr::opts_chunk$set(collapse = TRUE)
blogdown:::update_meta_addin()
blogdown:::serve_site()
#  bibliotecas
library(tidyverse)
library(rsample)
library(gtsummary)
library(dlookr)
library(flextable)
library(caret)
library(missRanger)
library(rms)
library(mlbench)
library(CalibrationCurves)
data(PimaIndiansDiabetes2)
# lectura y transformación de datos
datos <-
PimaIndiansDiabetes2  %>%
missRanger(num.trees = 100,verbose = 0) %>% # imputación múltiple
mutate(diabetes=if_else(diabetes=="pos",1,0)) %>% # transformación del resultado
select(diabetes,age,pedigree,pregnant,mass,glucose,pressure) # elección de predictores
#configuración
d <- datadist(datos)
options(datadist='d')
# Ajuste de un modelo de regresión logística
datos %>%
glm(diabetes ~ ., family = "binomial",data = .) %>%
gtsummary::tbl_regression(exponentiate = T,
tidy_fun = broom.helpers::tidy_parameters)
# Partición de datos
split <- initial_split(datos,strata="diabetes")
entrenamiento <- training(split)
prueba <- training(split)
# CONFIGURACIÓN RMS OBLIGATORIA -------------------------------------------
ddist <- datadist(entrenamiento)
options(datadist = "ddist")  # ¡CRÍTICO! Sin esto, las funciones rms fallarán
# Paso 1: Ajustar el modelo y validar
modelo <-
lrm(diabetes ~ . ,data = entrenamiento,x = T,y = T)
# PREDICCIÓN RECALIBRADA EN PRUEBA ----------------------------------------
# Predictor lineal en prueba
prediciones <- predict(modelo, newdata = prueba, type = "lp")
val.prob.ci.2(p = prediciones,y =prueba$diabetes )
# CONFIGURACIÓN RMS OBLIGATORIA -------------------------------------------
ddist <- datadist(datos)
options(datadist = "ddist")  # ¡CRÍTICO! Sin esto, las funciones rms fallarán
# Paso 1: Ajustar el modelo y validar
modelo <-
lrm(diabetes ~ . ,data = entrenamiento,x = T,y = T)
# PREDICCIÓN RECALIBRADA EN PRUEBA ----------------------------------------
# Predictor lineal en prueba
prediciones <- predict(modelo, newdata = prueba, type = "lp")
val.prob.ci.2(p = prediciones,y =prueba$diabetes )
# Partición de datos
split <- initial_split(datos,strata="diabetes")
entrenamiento <- training(split)
prueba <- training(split)
# CONFIGURACIÓN RMS OBLIGATORIA -------------------------------------------
ddist <- datadist(datos)
options(datadist = "ddist")  # ¡CRÍTICO! Sin esto, las funciones rms fallarán
# Paso 1: Ajustar el modelo y validar
modelo <-
lrm(diabetes ~ . ,data = entrenamiento,x = T,y = T)
# PREDICCIÓN RECALIBRADA EN PRUEBA ----------------------------------------
# Predictor lineal en prueba
prediciones <- predict(modelo, newdata = prueba, type = "lp")
# val.prob.ci.2(p = prediciones,y =prueba$diabetes )
prediciones
prueba$diabetes
# PREDICCIÓN RECALIBRADA EN PRUEBA ----------------------------------------
# Predictor lineal en prueba
prediciones <- predict(modelo, newdata = prueba, type = "lp")
val.prob.ci.2(p = prediciones,y =prueba$diabetes )
# Partición de datos
split <- initial_split(datos,strata="diabetes")
entrenamiento <- training(split)
prueba <- testing(split)
# CONFIGURACIÓN RMS OBLIGATORIA -------------------------------------------
ddist <- datadist(datos)
options(datadist = "ddist")  # ¡CRÍTICO! Sin esto, las funciones rms fallarán
# Paso 1: Ajustar el modelo y validar
modelo <-
lrm(diabetes ~ . ,data = entrenamiento,x = T,y = T)
# PREDICCIÓN RECALIBRADA EN PRUEBA ----------------------------------------
# Predictor lineal en prueba
prediciones <- predict(modelo, newdata = prueba, type = "lp")
val.prob.ci.2(p = prediciones,y =prueba$diabetes )
# PREDICCIÓN RECALIBRADA EN PRUEBA ----------------------------------------
# Predictor lineal en prueba
prediciones <- predict(modelo, newdata = prueba, type = "fitted")
val.prob.ci.2(p = prediciones,y =prueba$diabetes )
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::serve_site()
knitr::opts_chunk$set(collapse = TRUE)
#  bibliotecas
library(tidyverse)
library(rsample)
library(gtsummary)
library(dlookr)
library(flextable)
library(caret)
library(missRanger)
library(rms)
library(mlbench)
library(CalibrationCurves)
data(PimaIndiansDiabetes2)
# lectura y transformación de datos
datos <-
PimaIndiansDiabetes2  %>%
missRanger(num.trees = 100,verbose = 0) %>% # imputación múltiple
mutate(diabetes=if_else(diabetes=="pos",1,0)) %>% # transformación del resultado
select(diabetes,age,pedigree,pregnant,mass,glucose,pressure) # elección de predictores
#configuración
d <- datadist(datos)
options(datadist='d')
# Ajuste de un modelo de regresión logística
datos %>%
glm(diabetes ~ ., family = "binomial",data = .) %>%
gtsummary::tbl_regression(exponentiate = T,
tidy_fun = broom.helpers::tidy_parameters)
# Partición de datos
split <- initial_split(datos,strata="diabetes")
entrenamiento <- training(split)
prueba <- testing(split)
# CONFIGURACIÓN RMS OBLIGATORIA -------------------------------------------
ddist <- datadist(datos)
options(datadist = "ddist")  # ¡CRÍTICO! Sin esto, las funciones rms fallarán
# Paso 1: Ajustar el modelo y validar
modelo <-
lrm(diabetes ~ . ,data = entrenamiento,x = T,y = T)
# PREDICCIÓN RECALIBRADA EN PRUEBA ----------------------------------------
# Predictor lineal en prueba
prediciones <- predict(modelo, newdata = prueba, type = "fitted")
val.prob.ci.2(p = prediciones,y =prueba$diabetes )
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
#  bibliotecas
library(tidyverse)
library(rsample)
library(gtsummary)
library(dlookr)
library(flextable)
library(caret)
library(missRanger)
library(rms)
library(mlbench)
library(CalibrationCurves)
data(PimaIndiansDiabetes2)
# lectura y transformación de datos
datos <-
PimaIndiansDiabetes2  %>%
missRanger(num.trees = 100,verbose = 0) %>% # imputación múltiple
mutate(diabetes=if_else(diabetes=="pos",1,0)) %>% # transformación del resultado
select(diabetes,age,pedigree,pregnant,mass,glucose,pressure) # elección de predictores
#configuración
d <- datadist(datos)
options(datadist='d')
# Ajuste de un modelo de regresión logística
datos %>%
glm(diabetes ~ ., family = "binomial",data = .) %>%
gtsummary::tbl_regression(exponentiate = T,
tidy_fun = broom.helpers::tidy_parameters)
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::check_site()
blogdown::check_site()
