install.packages("torch")
library(keras)
install.packages("keras3")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown::stop_server()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
wowchemy_version <- function(root = ".") {
mt <- file.path(root, "config/_default/module.toml")
gm <- file.path(root, "go.mod")
if (file.exists(mt)) {
lines <- readLines(mt, warn = FALSE)
v <- grep('wowchemy.*version\\s*=\\s*"', lines, value = TRUE)
if (length(v)) return(v)
out <- tryCatch(blogdown::hugo_cmd("mod", "graph"), error = function(e) NA)
if (!is.na(out)) return(out)
}
if (file.exists(gm)) {
lines <- readLines(gm, warn = FALSE)
v <- grep('wowchemy-hugo-themes/modules/wowchemy.*v[0-9]', lines, value = TRUE)
if (length(v)) return(v)
}
tf <- list.files(file.path(root, "themes"), pattern = "theme\\.toml$", recursive = TRUE, full.names = TRUE)
if (length(tf)) {
ver <- grep('^version\\s*=\\s*"', readLines(tf[1], warn = FALSE), value = TRUE)
if (length(ver)) return(paste(basename(dirname(tf[1])), ver, sep = " — "))
desc <- tryCatch(system2("git", c("-C", dirname(tf[1]), "describe", "--tags", "--always"),
stdout = TRUE), error = function(e) "")
if (length(desc) && nchar(desc[1])) return(paste("Git:", desc[1]))
}
"No pude detectar la versión (¿usas Modules o carpeta themes?)."
}
wowchemy_version()
# Localiza la carpeta del tema
tf <- list.files("themes", pattern = "theme\\.toml$", recursive = TRUE, full.names = TRUE)
td <- dirname(tf[1]); td
# 1) Ver de qué repo viene
system2("git", c("-C", td, "remote", "-v"), stdout = TRUE)
# 2) Ver si hay un tag que corresponda a tu commit
system2("git", c("-C", td, "describe", "--tags", "--always"), stdout = TRUE)
# 3) Ver fecha y mensaje del commit actual
system2("git", c("-C", td, "show", "-s", "--format=%h %ci %d %s", "HEAD"), stdout = TRUE)
# 4) Listar tags del remoto (para cruzar con tu commit si no hay tag local)
system2("git", c("-C", td, "ls-remote", "--tags", "origin"), stdout = TRUE)
library(bookdown)
detach("package:bookdown", unload = TRUE)
library(blogdown)
check_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::build_site()
blogdown:::check_site()
blogdown:::check_site()
blogdown:::check_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::build_site()
blogdown:::check_site()
?blogdown:::check_site()
check_content()
blogdown:::check_content()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::build_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::build_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
install.packages("fs")
ruta_proyecto <- getwd()  # o puedes especificar otra ruta, e.g., "~/mi_proyecto"
ruta_proyecto
estructura <- fs::dir_tree(ruta_proyecto, recurse = TRUE)
install.packages("clipr")
clipr::write_clip(estructura)
blogdown:::build_site()
blogdown:::check_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::build_site()
blogdown:::check_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::build_site()
blogdown:::build_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::build_site()  # Construye el sitio localmente.
blogdown:::serve_site()  # Sirve localmente para preview.
blogdown:::serve_site()  # Sirve localmente para preview.
install.packages(c("rsample", "rms"))
install.packages("C:/Users/maicel/Downloads/zoo_1.8-14.zip", repos = NULL, type = "win.binary")
install.packages("rsample")
install.packages("rms")
install.packages("rms", repos = "https://cloud.r-project.org")
# Establecer el tiempo de espera en 300 segundos (5 minutos)
options(timeout = 300)
# Intentar la instalación de nuevo
install.packages("rms")
# (Opcional) Restablecer el tiempo de espera a su valor predeterminado (60 segundos)
# options(timeout = 60)
blogdown:::serve_site()  # Sirve localmente para preview.
blogdown:::stop_server() # Detiene el servidor.
blogdown:::serve_site()  # Sirve localmente para preview.
blogdown:::serve_site()  # Sirve localmente para preview.
blogdown:::stop_server() # Detiene el servidor.
blogdown:::serve_site()  # Sirve localmente para preview.
blogdown:::serve_site()  # Sirve localmente para preview.
# LIBRERÍAS MÍNIMAS PERO SUFICIENTES
library(rms)    # El alma de la metodología
library(pROC)   # ROC confiable
library(ggplot2)# Gráficos publicación
library(missRanger)
set.seed(123)   # para reproducibilidad
# DATOS:
data("PimaIndiansDiabetes")
datos <- PimaIndiansDiabetes
blogdown:::serve_site()  # Sirve localmente para preview.
# LIBRERÍAS MÍNIMAS PERO SUFICIENTES
library(rms)    # El alma de la metodología
library(pROC)   # ROC confiable
library(ggplot2)# Gráficos publicación
library(missRanger)
library(mlbench)
set.seed(123)   # para reproducibilidad
# DATOS:
data("PimaIndiansDiabetes")
datos <- PimaIndiansDiabetes
# PASO CRÍTICO: Valores imposibles → NA (no ignorar)
datos <- datos %>%
# Reemplaza 0 por NA solo en las columnas especificadas en vars_clinicas
mutate(across(all_of(vars_clinicas), ~ ifelse(.x == 0, NA, .x))) %>%
# Luego aplica missRanger al dataset completo (o se puede focalizar si se desea)
missRanger()
library(mutate)
# LIBRERÍAS MÍNIMAS PERO SUFICIENTES
library(rms)    # El alma de la metodología
library(pROC)   # ROC confiable
library(ggplot2)# Gráficos publicación
library(missRanger)
library(mlbench)
library(dplyr)
library(conflicted)
set.seed(123)   # para reproducibilidad
# DATOS:
data("PimaIndiansDiabetes")
datos <- PimaIndiansDiabetes
# PASO CRÍTICO: Valores imposibles → NA (no ignorar)
datos <- datos %>%
# Reemplaza 0 por NA solo en las columnas especificadas en vars_clinicas
mutate(across(all_of(vars_clinicas), ~ ifelse(.x == 0, NA, .x))) %>%
# Luego aplica missRanger al dataset completo (o se puede focalizar si se desea)
missRanger()
# predictores
vars_clinicas <- c("glucose", "pressure", "triceps", "insulin", "mass")
# LIBRERÍAS MÍNIMAS PERO SUFICIENTES
library(rms)    # El alma de la metodología
library(pROC)   # ROC confiable
library(ggplot2)# Gráficos publicación
library(missRanger)
library(mlbench)
library(dplyr)
library(conflicted)
set.seed(123)   # para reproducibilidad
# DATOS:
data("PimaIndiansDiabetes")
datos <- PimaIndiansDiabetes
# predictores
vars_clinicas <- c("glucose", "pressure", "triceps", "insulin", "mass")
# PASO CRÍTICO: Valores imposibles → NA (no ignorar)
datos <- datos %>%
# Reemplaza 0 por NA solo en las columnas especificadas en vars_clinicas
mutate(across(all_of(vars_clinicas), ~ ifelse(.x == 0, NA, .x))) %>%
# Luego aplica missRanger al dataset completo (o se puede focalizar si se desea)
missRanger()
# CONFIGURACIÓN RMS (NO OMITIR)
dd <- datadist(datos)
options(datadist = "dd")
blogdown:::build_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::build_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
# Opciones globales para los chunks de código
knitr::opts_chunk$set(
echo = TRUE,       # Muestra el código
message = FALSE,   # Oculta mensajes de paquetes
warning = FALSE,   # Oculta advertencias
fig.align = 'center', # Centra las figuras
fig.retina = 2     # Mejora la resolución de las figuras
)
# Carga de bibliotecas necesarias para todo el post
library(rsample)
library(rms)
# MODELO: PREDICTORES POR FISIOPATOLOGÍA, NO p-valores
modelo <- lrm(diabetes ~ rcs(glucose, 3) + rcs(mass, 3) + age + pregnant + pedigree, data = datos, x = TRUE, y = TRUE)
# Opciones globales para los chunks de código
knitr::opts_chunk$set(
echo = TRUE,       # Muestra el código
message = FALSE,   # Oculta mensajes de paquetes
warning = FALSE,   # Oculta advertencias
fig.align = 'center', # Centra las figuras
fig.retina = 2     # Mejora la resolución de las figuras
)
# Carga de bibliotecas necesarias para todo el post
library(rsample)
library(rms)
# MODELO: PREDICTORES POR FISIOPATOLOGÍA, NO p-valores
modelo <- lrm(diabetes ~ rcs(glucose, 3) + rcs(mass, 3) + age + pregnant + pedigree, data = datos, x = TRUE, y = TRUE)
# Opciones globales para los chunks de código
knitr::opts_chunk$set(
echo = TRUE,       # Muestra el código
message = FALSE,   # Oculta mensajes de paquetes
warning = FALSE,   # Oculta advertencias
fig.align = 'center', # Centra las figuras
fig.retina = 2     # Mejora la resolución de las figuras
)
# Carga de bibliotecas necesarias para todo el post
library(rsample)
library(rms)
# MODELO: PREDICTORES POR FISIOPATOLOGÍA, NO p-valores
modelo <- lrm(diabetes ~ rcs(glucose, 3) + rcs(mass, 3) + age + pregnant + pedigree, data = datos, x = TRUE, y = TRUE)
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::stop_server()
blogdown:::stop_server()
blogdown:::serve_site()
# LIBRERÍAS MÍNIMAS PERO SUFICIENTES
library(rms)    # El alma de la metodología
library(pROC)   # ROC confiable
library(ggplot2)# Gráficos publicación
library(missRanger)
library(mlbench)
library(dplyr)
library(conflicted)
set.seed(123)   # para reproducibilidad
# DATOS:
data("PimaIndiansDiabetes")
datos <- PimaIndiansDiabetes
# predictores
vars_clinicas <- c("glucose", "pressure", "triceps", "insulin", "mass")
# PASO CRÍTICO: Transformacion de datos
datos <- datos %>%
# Reemplaza 0 por NA solo en las columnas especificadas en vars_clinicas
mutate(across(all_of(vars_clinicas), ~ ifelse(.x == 0, NA, .x))) %>%
# Luego aplica missRanger al dataset completo (o se puede focalizar si se desea)
missRanger()
# CONFIGURACIÓN RMS (NO OMITIR)
dd <- datadist(datos)
options(datadist = "dd")
#MODELO: PREDICTORES POR FISIOPATOLOGÍA, NO p-valores
modelo <- lrm(diabetes ~ rcs(glucose, 3) + rcs(mass, 3) + age + pregnant + pedigree, data = datos, x = TRUE, y = TRUE)
# VALIDACIÓN: BOOTSTRAP O NADA
val_boot <- validate(modelo, method = "boot", B = 200)
cal_boot <- calibrate(modelo, method = "boot", B = 200)
# GRÁFICOS DE SUPERVIVENCIA
plot(cal_boot, main = "Probabilidasde predichas vs observadas")
abline(0, 1, lty = 2, col = "red")
roc_obj <- roc(datos$diabetes, predict(modelo, type = "fitted"))
plot(roc_obj, main = paste("AUC =", round(auc(roc_obj), 3)),
col = "blue", legacy.axes = TRUE)
# VALIDACIÓN: BOOTSTRAP O NADA
val_boot <- validate(modelo, method = "boot", B = 200)
cal_boot <- calibrate(modelo, method = "boot", B = 200)
# GRÁFICOS DE SUPERVIVENCIA
# plot(cal_boot, main = "Probabilidasde predichas vs observadas")
# abline(0, 1, lty = 2, col = "red")
roc_obj <- roc(datos$diabetes, predict(modelo, type = "fitted"))
#plot(roc_obj, main = paste("AUC =", round(auc(roc_obj), 3)), col = "blue", legacy.axes = TRUE)
# NOMOGRAMA: EL TEST DE USABILIDAD CLÍNICA
nom <- nomogram(modelo, fun = plogis, funlabel = "Riesgo Diabetes")
# plot(nom)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
# Opciones globales para los chunks de código
knitr::opts_chunk$set(
echo = TRUE,       # Muestra el código
message = FALSE,   # Oculta mensajes de paquetes
warning = FALSE,   # Oculta advertencias
fig.align = 'center', # Centra las figuras
fig.retina = 2     # Mejora la resolución de las figuras
)
# bibliotecas
library(rms)    # El alma de la metodología
library(pROC)   # ROC confiable
library(ggplot2)# Gráficos publicación
library(missRanger)
library(mlbench)
library(dplyr)
library(conflicted)
set.seed(123)   # para reproducibilidad
# DATOS:
data("PimaIndiansDiabetes")
datos <- PimaIndiansDiabetes
# predictores
vars_clinicas <- c("glucose", "pressure", "triceps", "insulin", "mass")
# PASO CRÍTICO: Transformacion de datos
datos <- datos %>%
# Reemplaza 0 por NA solo en las columnas especificadas en vars_clinicas
mutate(across(all_of(vars_clinicas), ~ ifelse(.x == 0, NA, .x))) %>%
# Luego aplica missRanger al dataset completo (o se puede focalizar si se desea)
missRanger()
# CONFIGURACIÓN RMS (NO OMITIR)
dd <- datadist(datos)
options(datadist = "dd")
#MODELO: PREDICTORES POR FISIOPATOLOGÍA, NO p-valores
modelo <- lrm(diabetes ~ rcs(glucose, 3) + rcs(mass, 3) + age + pregnant + pedigree, data = datos, x = TRUE, y = TRUE)
# VALIDACIÓN: BOOTSTRAP O NADA
val_boot <- validate(modelo, method = "boot", B = 200)
cal_boot <- calibrate(modelo, method = "boot", B = 200)
# GRÁFICOS DE SUPERVIVENCIA
#plot(cal_boot, main = "Probabilidasde predichas vs observadas")
#abline(0, 1, lty = 2, col = "red")
roc_obj <- roc(datos$diabetes, predict(modelo, type = "fitted"))
# plot(roc_obj, main = paste("AUC =", round(auc(roc_obj), 3)), col = "blue", legacy.axes = TRUE)
# NOMOGRAMA: EL TEST DE USABILIDAD CLÍNICA
nom <- nomogram(modelo, fun = plogis, funlabel = "Riesgo Diabetes")
plot(nom)
# VALIDACIÓN: BOOTSTRAP O NADA
val_boot <- validate(modelo, method = "boot", B = 200)
cal_boot <- calibrate(modelo, method = "boot", B = 200)
# GRÁFICOS DE SUPERVIVENCIA
#plot(cal_boot, main = "Probabilidasde predichas vs observadas")
#abline(0, 1, lty = 2, col = "red")
roc_obj <- roc(datos$diabetes, predict(modelo, type = "fitted"))
# plot(roc_obj, main = paste("AUC =", round(auc(roc_obj), 3)), col = "blue", legacy.axes = TRUE)
blogdown:::serve_site()
blogdown:::serve_site()
# Opciones globales para los chunks de código
knitr::opts_chunk$set(
echo = TRUE,       # Muestra el código
message = FALSE,   # Oculta mensajes de paquetes
warning = FALSE,   # Oculta advertencias
fig.align = 'center', # Centra las figuras
fig.retina = 2     # Mejora la resolución de las figuras
)
# Opciones globales para los chunks de código
knitr::opts_chunk$set(
echo = TRUE,       # Muestra el código
message = FALSE,   # Oculta mensajes de paquetes
warning = FALSE,   # Oculta advertencias
fig.align = 'center', # Centra las figuras
fig.retina = 2     # Mejora la resolución de las figuras
)
blogdown:::serve_site()
library(conflicted)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::build_site()
blogdown:::check_site()
blogdown:::check_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::check_site()
blogdown::build_site(build_rmd = 'timestamp')
blogdown:::check_site()
blogdown:::serve_site()
blogdown:::build_site()
blogdown:::serve_site()
blogdown:::build_site()
blogdown:::serve_site()
blogdown:::build_site()  # Construye el sitio localmente.
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown:::check_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::check_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::build_site()
blogdown:::build_site()
blogdown:::check_site()
blogdown:::serve_site()
blogdown:::serve_site()
